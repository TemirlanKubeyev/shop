Spring - фреймворк состоящий из большого количества модулей ориентированного
на разработку разноплановых приложений, но в основном используется для разработки
веб приложений работающих по протоколу HTTP. В ядро фреймворка Spring
(зависимость под названием spring-core) заложены такие концепции как IoC
(Inversion of Control, инверсия управления) и DI (Dependency Injection,
внедрение зависимостей) которые мы будем расписывать чуть позже.

HTTP - протокол передачи данных между двумя узлами называемые клиентом и сервером.
Протокол HTTP реализует модель взаимодействия клиент-сервер, где клиент является
стороной формирующей HTTP запрос к серверу, сервер в свою очередь является принимающей
стороной цель которой обработать входящий запрос и сформировать HTTP ответ отправляемый клиенту.
HTTP запросы и ответы должны соответствовать структуре строго обозначенной в стандарте
протокола (по сути дела HTTP запросы и ответы представляют собой перечень текстовой информации).

Клиент -> HTTP запрос -> Сервер -> HTTP ответ -> Клиент.

Структура HTTP запроса:
1) адрес запрашиваемого ресурса - указывается HTTP метод, адрес запрашиваемого ресурса
и версия HTTP протокола. В качестве HTTP метода один из двух базовых, GET либо POST.
Ключевое отличие между GET и POST заключается в наличии тела (3 пункт), тело может быть задано
только для POST запросов.
2) Заголовки HTTP запроса - секция где перечисляются некие параметры описывающие отправляемые
HTTP запрос. К заголовкам можно отнести следующие:
тип отправляемой информации, клиент через который отправляется запрос, дата и время отправки запроса,
период ожидания ответа и так далее.
3) Тело HTTP запроса - область запроса где может храниться любая текстовая информация, данная область
является скрытой и не доступна для всеобщего обозрения. Не смотря, на то что в HTTP методе GET отсутствует тело
запроса, это не означает что при использовании данного метода нельзя передать информацию,
информацию передать можно, но в открытом виде (напрямую в адресе запрашиваемого ресурса)
что делает такую передачу информации не безопасной.

Структура HTTP ответа:
1) Статус HTTP ответа - один из возможных специальных кодов определенный в протоколе HTTP который
сервер может отправить в зависимости от ситуации. Всего существует 4 группы статусов: 2хх
(успешное выполнение запроса без ошибок), 3хх (успешное выполнение запроса, но с перенаправлением),
4хх (выполнение запроса с ошибкой по вине клиента), 5хх (выполнение запроса с ошибкой по вине сервера).
2) Заголовки HTTP ответа - параметры отправляемые сервером клиенту, например тип результирующей информации,
назначение кук для браузера, необходимость сделать перенаправление и так далее.
3) Тело HTTP ответа - непосредственно информация отправляемые сервером клиенту.

Один из основных заголовков используемых в HTTP ответах это Content-Type, значение данного заголовка определяет типа
записанной в тело информации, основываясь на значении данного заголовка будет делаться вывод о том как именно
клиент должен отобразить информацию из тела ответа.
* 'text\plain' - обычный текст не привязанный к какому-либо формату.
* 'text\html' - текст в формате HTML.
* 'application\json' - текст в формате JSON.
* 'application\pdf' - документ формата PDF.
* 'image\jpeg' - изображение формата JPEG.
* 'image\png' - изображение формата PNG.

Любое веб-приложение состоит из множества обозначенных в нем ресурсов, каждый ресурс представляет собой адрес
к которому может обратиться клиент.

В Spring фреймворке каждого ресурсы приложения определяются при помощи методов класса называемого контроллером.
Каждому методу контроллера соответствует свой отдельно взятый ресурс. Каждому методу контроллера должен быть явно
определен адрес по которому к нему можно обратиться, делается это при помощи одной из следующих аннотации:
@RequestMapping, @GetMapping, @PostMapping.

Используя GET и POST методы запроса можно передавать информацию через строку определенного формата, данный формат
строки строится из пар ключ-значение связанных между собой символом '&'. Формат одной пары ключ-значение
записывается как '<ключ>=<значение>', где ключ название параметра (переменной), а значение это её непосредственная
информация. При передаче нескольких параметров строка выглядела бы следующим образом:
'ключ1=значение1&ключ2=значение2&ключ3=значение3'. При использовании GET метода данная строка записывается непосредственно
в адреса запрашиваемого ресурса в самом конце начиная со знака '?'.

Пример передачи параметров при использовании HTTP методы GET, видно, что данные передаются в открытом виде.
Данный способ передачи только для незначительной информации (то информация которую нестрашно потерять).


'http://localhost:8080/some_resource' - запрос ресурса



При использовании HTTP метод POST вся информация записывается в тело запроса и скрывается от внешнего
воздействия (такую информацию не получится просто так просмотреть без полноценного перехвата запроса).
При использовании протокола HTTPS тело запроса дополнитель шифруется при помощи SSL/YLS сертификата,
то есть прочитать тело сможет только сервер которому запрос предназначался. В тело запроса информация
записывается в формате связанные через '&' пар клю-значение, но только при использовании заголовка
'Content-Type' со значением 'application/x-www-from-urlencoded'.

Получить информацию отправленную через GET метод либо через POST метод с 'Content-Type'
со значением 'application/x-www-from-urlencoded' можно при помощи специальной аннотации @RequestParam.
















